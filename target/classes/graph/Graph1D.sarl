/** 
 * 
 */
package graph

import java.util.TreeMap
import java.util.UUID
import java.util.Random
import environnement.AgentBody

/**
 * @author Zaxyh
 * 
 */
class Graph1D {
	val random = new Random
	
	val nodes = <Graph1DNode>newArrayList

	val bodies = new TreeMap<UUID, AgentBody>
	
	private def buildCity()
	{
		//Create world
	}

	private def createBody(bodyType : Class<T>, agentId : UUID, perceptionDistance : int) : T with T extends AgentBody {
		var i = this.random.nextInt(nodes.size)

		while (!canMove(i, 0.0f))
		{
			i = this.random.nextInt(nodes.size)
		}
		
		var id = agentId
		if (id === null) {
			id = UUID::randomUUID
		}
		var node = nodes.get(i)
		var arc = node.arcsFrom.get(random.nextInt(node.numArcsFrom))		
		
		var cons = bodyType.getDeclaredConstructor(typeof(float), typeof(Graph1DArc), typeof(Graph1D), typeof(UUID), typeof(float))
		var body = cons.newInstance(i, arc, this, id, perceptionDistance)

		arc.addObject(body)

		this.bodies.put(id, body)

		return body
	}
	
	private def canMove(i : int, t : float) : boolean
	{
		if(i>0)
			return false
		return true
	}
}
